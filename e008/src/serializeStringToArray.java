import java.util.ArrayList;

public class serializeStringToArray {
//	Aufgabe unklar - es wird nicht deultlich erklärt, ob nur zeilenweise oder aber auch zeilenübergreifend zu suchen ist. Letzteres ist der Fall (input2 & adjacent2)
	public static void main(String[] args) {
		int count = 13;
		String splitString = "/n";
		String input = 
				"73167176531330624919225119674426574742355349194934/n" + 
				"96983520312774506326239578318016984801869478851843/n" + 
				"85861560789112949495459501737958331952853208805511/n" + 
				"12540698747158523863050715693290963295227443043557/n" + 
				"66896648950445244523161731856403098711121722383113/n" + 
				"62229893423380308135336276614282806444486645238749/n" + 
				"30358907296290491560440772390713810515859307960866/n" + 
				"70172427121883998797908792274921901699720888093776/n" + 
				"65727333001053367881220235421809751254540594752243/n" + 
				"52584907711670556013604839586446706324415722155397/n" + 
				"53697817977846174064955149290862569321978468622482/n" + 
				"83972241375657056057490261407972968652414535100474/n" + 
				"82166370484403199890008895243450658541227588666881/n" + 
				"16427171479924442928230863465674813919123162824586/n" + 
				"17866458359124566529476545682848912883142607690042/n" + 
				"24219022671055626321111109370544217506941658960408/n" + 
				"07198403850962455444362981230987879927244284909188/n" + 
				"84580156166097919133875499200524063689912560717606/n" + 
				"05886116467109405077541002256983155200055935729725/n" + 
				"71636269561882670428252483600823257530420752963450/n";
		String input2 = 
				"73167176531330624919225119674426574742355349194934" + 
				"96983520312774506326239578318016984801869478851843" + 
				"85861560789112949495459501737958331952853208805511" + 
				"12540698747158523863050715693290963295227443043557" + 
				"66896648950445244523161731856403098711121722383113" + 
				"62229893423380308135336276614282806444486645238749" + 
				"30358907296290491560440772390713810515859307960866" + 
				"70172427121883998797908792274921901699720888093776" + 
				"65727333001053367881220235421809751254540594752243" + 
				"52584907711670556013604839586446706324415722155397" + 
				"53697817977846174064955149290862569321978468622482" + 
				"83972241375657056057490261407972968652414535100474" + 
				"82166370484403199890008895243450658541227588666881" + 
				"16427171479924442928230863465674813919123162824586" + 
				"17866458359124566529476545682848912883142607690042" + 
				"24219022671055626321111109370544217506941658960408" + 
				"07198403850962455444362981230987879927244284909188" + 
				"84580156166097919133875499200524063689912560717606" + 
				"05886116467109405077541002256983155200055935729725" + 
				"71636269561882670428252483600823257530420752963450";
//		System.out.println(serialize(split(input,splitString)[19])[1]);
//		System.out.println(serialize(input2)[368]);
//		System.out.println(adjacent(input, splitString, count));
		System.out.println(adjacent2(input2, splitString, count));
		
	}
	
	public static String[] split(String input, String splitString){
		String[] splitts = input.split(splitString);
		return splitts;		
	}
	
	public static String[] serialize(String input){
		String[] serialized = input.split("|");
		return serialized;		
	}
	
	public static long adjacent2(String input, String splitString, int count){
		long heightest = 0;
		String[] seriInput = serialize(input);
		for (int i = 1; i < seriInput.length - (count+1); i++){
			long cHeightest = 1; 
			for (int offset = 0; offset < count; offset++){
				cHeightest *= Integer.parseInt(seriInput[i+offset]);
			}
			if (cHeightest > heightest){
				heightest = cHeightest;
				System.out.println(i);
			}
		}
		
		return heightest;
	}
	
	public static long adjacent(String input, String splitString, int count){
		long heighest = 0;
		for (int i = 0; i <= 19; i++){
			for (int offset = 0; offset < 49-count; offset++){
				long cHeighest = 1;
				for (int k = 1; k <= count; k++){
//					cHeighest *= Integer.parseInt(serialize(split(input,splitString)[i])[k+offset]);
				}
				if (cHeighest > heighest){
					heighest = cHeighest;
				}
			}
		}
		return heighest;
	}
}
